---
description: for frontend development
globs: *.tsx
---

**Next.js + TypeScript Core Principles**

**Project Structure**
- Do: Group routes by concern (auth/main)
- Not: Flat route structures
- Do: Separate UI components by complexity (atoms/organisms)
- Not: Monolithic component directories

**Type Safety**
- Do: Strict TS configs with noImplicitAny
- Not: Use `any` escape hatches
- Do: Brand primitive types (Email, UserID)
- Not: Assume all strings are valid

**Architecture**
- Do: Server components first
- Not: Client-side data waterfalls  
- Do: Colocate data fetching with components
- Not: Prop-drill server data

**State Management**
- Do: URL params for shared state
- Not: Overuse global client state
- Do: Server actions for mutations
- Not: Client-side API routes

**Performance**
- Do: Streaming with Suspense
- Not: Whole-page loading spinners
- Do: Cache static data aggressively
- Not: Refetch unchanged data

**Testing**
- Do: Test user flows over implementation
- Not: Focus solely on coverage %
- Do: Component integration tests
- Not: Mock everything unit tests

**Security**
- Do: Validate ALL inputs
- Not: Trust client-side validation
- Do: Sanitize dynamic content
- Not: Use dangerouslySetInnerHTML

**Code Quality**
- Do: Atomic commits
- Not: Monolithic "fix everything" commits
- Do: Prefer composition
- Not: Deep component inheritance
- Do: Memoize strategically 
- Not: Premature optimization

**Accessibility**
- Do: Semantic HTML first
- Not: Div soup with ARIA overrides
- Do: Keyboard nav testing
- Not: Mouse-only interactions

**SOLID Principles**
- Do: Single-component responsibility
- Not: God components
- Do: Narrow prop interfaces
- Not: Complex prop drilling
- Do: Dependency injection
- Not: Hard-coded services
